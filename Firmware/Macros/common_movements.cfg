#################################################################
#### Klipper - Makros // Macros you can see on the Dashboard ####
#################################################################

###########
## Servo ##
###########
[gcode_macro NEUTRAL]
description: Set Servo in neutral position
gcode:
    {% set batvar = printer["gcode_macro _BATMMU_VAR"] %}
    SET_SERVO SERVO=BATMMU_servo ANGLE={batvar.servo_neurtal_angle}
    SET_SERVO SERVO=BATMMU_servo WIDTH=0.0
    G4 P{batvar.servo_idle_time}

###################
## Test - Makros ##
###################
[gcode_macro mmu_move_100]
description: Test Stepper, check esteps
gcode:
    MANUAL_STEPPER STEPPER=BATMMU_stepper SET_POSITION=0
    MANUAL_STEPPER STEPPER=BATMMU_stepper MOVE={100} SPEED=50 ACCEL=100 SYNC=0
    G4 P0 #Don't remove this or the macro will stop working

##################################################################
#### Helper - Makros // Macros you can't see on the Dashboard ####
##################################################################

################
## Brain Mako ##
################

[gcode_macro _SET_TOOLS]
description: Prepare printer to print with Filament B.
gcode:
    _IS_Y_FREE_TO_LOAD_FILAMENT
    _IS_Y_FREE_TO_LOAD_FILAMENT #Macro has to be called two times so the variables get set properly
    _IS_EXTRUDER_FREE_TO_LOAD_FILAMENT
    _IS_EXTRUDER_FREE_TO_LOAD_FILAMENT #Macro has to be called two times so the variables get set properly
    _SET_TOOLS_MOVE

[gcode_macro _SET_TOOLS_MOVE]
description: Prepare printer to print with Filament B.
gcode:
    {% set batvar = printer["gcode_macro _BATMMU_VAR"] %}
    {% set batsavedvar = printer.save_variables.variables %}

## Filament is already loaded
    {% if printer["gcode_macro _IS_Y_FREE_TO_LOAD_FILAMENT"].is_y_free_to_load_filament == 11 %}
        M118 Filament A is already loaded.
    {% endif %}
    {% if printer["gcode_macro _IS_Y_FREE_TO_LOAD_FILAMENT"].is_y_free_to_load_filament == 22 %}
        M118 Filament B is already loaded.
    {% endif %}

## Free to load
    {% if printer["gcode_macro _IS_Y_FREE_TO_LOAD_FILAMENT"].is_y_free_to_load_filament == True %}
        {% if printer["gcode_macro _IS_EXTRUDER_FREE_TO_LOAD_FILAMENT"].is_extruder_free_to_load_filament == True %}
          M118 Y is free...
          _LOAD_FILAMENT
        {% endif %}
    {% endif %}

## Free to load but variables aren't correct
    {% if printer["gcode_macro _IS_Y_FREE_TO_LOAD_FILAMENT"].is_y_free_to_load_filament == 10 %}
        M118 BatErr002a: Filament A is set as loaded but sensors are not triggered.
        M118 Reset loaded filament to none and continue preparing... Tststs, did you unload the filament by hand?
        _SET_LOADED_FILAMENT_NONE
        _LOAD_FILAMENT
    {% endif %}
    {% if printer["gcode_macro _IS_Y_FREE_TO_LOAD_FILAMENT"].is_y_free_to_load_filament == 20 %}
        M118 BatErr002b: Filament B is set as loaded but sensors are not triggered.
        M118 Reset loaded filament to none and continue preparing... Tststs, did you unload the filament by hand?
        _SET_LOADED_FILAMENT_NONE
        _LOAD_FILAMENT
    {% endif %}

## Unload other Filament first
    {% if printer["gcode_macro _IS_Y_FREE_TO_LOAD_FILAMENT"].is_y_free_to_load_filament == 12 %}
        M118 Filament B is loaded, unloading it and load Filament A.
        _UNLOAD_FILAMENT_B
        _LOAD_FILAMENT_A
    {% endif %}
    {% if printer["gcode_macro _IS_Y_FREE_TO_LOAD_FILAMENT"].is_y_free_to_load_filament == 21 %}
        M118 Filament A is loaded, unloading it and load Filament B.
        _UNLOAD_FILAMENT_A
        _LOAD_FILAMENT_B
    {% endif %}

### Error
    {% if printer["gcode_macro _IS_Y_FREE_TO_LOAD_FILAMENT"].is_y_free_to_load_filament == 00 %}
        M118 BatErr333: an unknown filament is loaded!
        M118 Use _SET_LOADED_FILAMENT_A or _SET_LOADED_FILAMENT_B to set the correct Filament that is loaded. Then use _RESUME_MMU and then rerun the command.
        _PAUSE_MMU
    {% endif %}

    {% if printer["gcode_macro _IS_Y_FREE_TO_LOAD_FILAMENT"].is_y_free_to_load_filament == False %}
        M118 BatErr333: Filament is stuck in Y-Splitter!
        _PAUSE_MMU
    {% endif %}

    {% if printer["gcode_macro _IS_Y_FREE_TO_LOAD_FILAMENT"].is_y_free_to_load_filament == 66 %}
        M118 BatErr333: Big Problem! Filament is stuck in Toolhead!
        _PAUSE_MMU
    {% endif %}

##############
## Loadings ##
##############

## Loading Start

[gcode_macro _LOAD_FILAMENT]
description: Load Filament - movements after checks
gcode:
    {% set retries = 3|int %}
    {% set batsavedvar = printer.save_variables.variables %}
    {% set batvar = printer["gcode_macro _BATMMU_VAR"] %}

        {% if batsavedvar.requested_filament == 1 %}
            {% if printer["gcode_macro _PARK_FILAMENT"].a_is_prepared == False %}
                _PREPARE_FILAMENT
            {% endif %}
            {% if printer["gcode_macro _PARK_FILAMENT"].a_is_prepared == True %}
                FILAMENT_A
            {% endif %}
        {% endif %}
        {% if batsavedvar.requested_filament == 2 %}
            {% if printer["gcode_macro _PARK_FILAMENT"].b_is_prepared == False %}
                _PREPARE_FILAMENT
            {% endif %}
            {% if printer["gcode_macro _PARK_FILAMENT"].b_is_prepared == True %}
                FILAMENT_B
            {% endif %}
        {% endif %}
        _Y_TO_EXTRUDER
        _EXTRUDER_TO_TOOLHEAD_SENSOR
        {% for try in range(retries|int) %}
            _RETRY_EXTRUDER_TO_TOOLHEAD_SENSOR
            M400
        {% endfor %}
        _LOAD_FILAMENT_FINISH

## Loading End
[gcode_macro _LOAD_FILAMENT_FINISH]
description: Load Filament - movements after checks
gcode:
    _IS_FILAMENT_IN_TOOLHEAD
    _LOAD_FILAMENT_FINISH_MOVE

[gcode_macro _LOAD_FILAMENT_FINISH_MOVE]
description: Load Filament - movements after checks
gcode:
    {% if printer["gcode_macro _IS_FILAMENT_IN_TOOLHEAD"].is_filament_in_toolhead == True %}
        _RESET_BATMMU_EXTRUDER_STEPPER
        _TOOLHEAD_SENSOR_TO_NOZZLE
    {% endif %}

################
## Unloadings ##
################

## Unloading start
[gcode_macro _UNLOAD_FILAMENT]
description: Unoad Filament from the Toolhead to the Y-Splitter park-position
gcode:
    _UNLOADING_FILAMENT_CHECK
    _UNLOAD_FILAMENT_MOVE

[gcode_macro _UNLOAD_FILAMENT_MOVE]
description: Unoad Filament from the Toolhead to the Y-Splitter park-position
gcode:
    {% set retries = 3|int %}

    {% if printer["gcode_macro _UNLOADING_FILAMENT_CHECK"].unloading_filament_check == True %}
        _UNLOAD_TOOLHEAD
        {% for try in range(retries|int) %}
            _RETRY_UNLOAD_TOOLHEAD
            M400
        {% endfor %}
    _UNLOAD_FILAMENT_FINISH
    {% endif %}

## Unloading middle
[gcode_macro _UNLOAD_FILAMENT_FINISH]
description: Unoad Filament from the Toolhead to the Y-Splitter park-position
gcode:
    _IS_FILAMENT_OUT_OF_TOOLHEAD
    _UNLOAD_FILAMENT_FINISH_MOVE

[gcode_macro _UNLOAD_FILAMENT_FINISH_MOVE]
description: Unoad Filament from the Toolhead to the Y-Splitter park-position
gcode:
    {% set retries = 3|int %}

    {% if printer["gcode_macro _IS_FILAMENT_OUT_OF_TOOLHEAD"].is_filament_out_of_toolhead == True %}
        _EXTRUDER_TO_Y
         {% for try in range(retries|int) %}
            _RETRY_EXTRUDER_TO_Y
            M400
        {% endfor %}
        _UNLOAD_FILAMENT_FINISH_FINAL
    {% endif %}

## Unloading end
[gcode_macro _UNLOAD_FILAMENT_FINISH_FINAL]
description: Unoad Filament from the Toolhead to the Y-Splitter park-position
gcode:
    _IS_FILAMENT_OUT_Y
    _UNLOAD_FILAMENT_FINISH_FINAL_MOVE

[gcode_macro _UNLOAD_FILAMENT_FINISH_FINAL_MOVE]
description: Unoad Filament from the Toolhead to the Y-Splitter park-position
gcode:
    {% set batvar = printer["gcode_macro _BATMMU_VAR"] %}
    {% set batsavedvar = printer.save_variables.variables %}

    {% if printer["gcode_macro _IS_FILAMENT_OUT_Y"].is_filament_out_y == True %}
        {% if batsavedvar.requested_filament == 1 %}
          _PARK_FILAMENT
          M118 Filament A got unloaded into Y-Splitter.
        {% endif %}
        {% if batsavedvar.requested_filament == 2 %}
          _PARK_FILAMENT
          M118 Filament B got unloaded into Y-Splitter.
        {% endif %}
    {% endif %}

#####################
## Loading helpers ##
#####################

### Before Y-Splitter ###

## Preparing
# Preparing Start
[gcode_macro _PREPARE_FILAMENT]
description: Load Filament to the Y Splitter splitting point
gcode:
    _IS_Y_FREE_TO_LOAD_FILAMENT
    _PREPARE_FILAMENT_MOVE
   

[gcode_macro _PREPARE_FILAMENT_MOVE]
description: Load Filament to the Y Splitter splitting point
gcode:
    {% if printer["gcode_macro _IS_Y_FREE_TO_LOAD_FILAMENT"].is_y_free_to_load_filament == True %}
        {% set retries = 3|int %}
        _MMU_TO_Y
        {% for try in range(retries|int) %}
            _RETRY_MMU_TO_Y
            M400
        {% endfor %}
        _PREPARE_FILAMENT_FINISH
    {% endif %}

# Preparing End
[gcode_macro _PREPARE_FILAMENT_FINISH]
description: Load Filament to the Y Splitter splitting point
gcode:
    _IS_FILAMENT_IN_Y
    _PREPARE_FILAMENT_FINISH_MOVE

[gcode_macro _PREPARE_FILAMENT_FINISH_MOVE]
description: Load Filament to the Y Splitter splitting point
gcode:
    {% if printer["gcode_macro _IS_FILAMENT_IN_Y"].is_filament_in_y == True %}
      _PARK_FILAMENT
      SET_GCODE_VARIABLE MACRO=_IS_FILAMENT_IN_Y VARIABLE=is_filament_in_y VALUE=False
    {% endif %}

## MMU to Y
[gcode_macro _MMU_TO_Y]
description: 
gcode:
    {% set batvar = printer["gcode_macro _BATMMU_VAR"] %}
    {% set batsavedvar = printer.save_variables.variables %}
    {% if batsavedvar.paused == False %}
          {% if batsavedvar.requested_filament == 1 %}
            MANUAL_STEPPER STEPPER=BATMMU_stepper SET_POSITION=0
            FILAMENT_A
            MANUAL_STEPPER STEPPER=BATMMU_stepper MOVE={batvar.bowdenlength_a_mmu_to_y + batvar.smart_y_to_sensor} SPEED={batvar.feed_speed} ACCEL={batvar.acceleration} STOP_ON_ENDSTOP=2 SYNC=1
            G4 P0 #Don't remove this or the macro will stop working
          {% endif %}
          {% if batsavedvar.requested_filament == 2 %}
            MANUAL_STEPPER STEPPER=BATMMU_stepper SET_POSITION=0
            FILAMENT_B
            MANUAL_STEPPER STEPPER=BATMMU_stepper MOVE=-{batvar.bowdenlength_b_mmu_to_y + batvar.smart_y_to_sensor} SPEED={batvar.feed_speed} ACCEL={batvar.acceleration} STOP_ON_ENDSTOP=2 SYNC=1
            G4 P0 #Don't remove this or the macro will stop working
          {% endif %}
    {% endif %}
    {% if batsavedvar.paused == True %}
        M118 MMU was paused before. Tststs, make sure to use _MMU_RESUME if something went wrong. Continue now anyways...
        M118 xy Wee need a makro that asks for a reload of filament when printer is printing (either reload or swap to other Filament)
        _SET_PAUSED_FALSE
        {% if batsavedvar.requested_filament == 1 %}
            MANUAL_STEPPER STEPPER=BATMMU_stepper SET_POSITION=0
            FILAMENT_A
            MANUAL_STEPPER STEPPER=BATMMU_stepper MOVE={batvar.bowdenlength_a_mmu_to_y + batvar.smart_y_to_sensor} SPEED={batvar.feed_speed} ACCEL={batvar.acceleration} STOP_ON_ENDSTOP=2 SYNC=1
            G4 P0 #Don't remove this or the macro will stop working
          {% endif %}
          {% if batsavedvar.requested_filament == 2 %}
            MANUAL_STEPPER STEPPER=BATMMU_stepper SET_POSITION=0
            FILAMENT_B
            MANUAL_STEPPER STEPPER=BATMMU_stepper MOVE=-{batvar.bowdenlength_b_mmu_to_y + batvar.smart_y_to_sensor} SPEED={batvar.feed_speed} ACCEL={batvar.acceleration} STOP_ON_ENDSTOP=2 SYNC=1
            G4 P0 #Don't remove this or the macro will stop working
          {% endif %}
    {% endif %}

[gcode_macro _RETRY_MMU_TO_Y]
description: Try to reload the filament from the MMU in the Y Splitter if it did not reach the sensor
gcode: 
    {% set batsavedvar = printer.save_variables.variables %}
    {% set batvar = printer["gcode_macro _BATMMU_VAR"] %}
    {% if printer['filament_switch_sensor load_check_sensor'].filament_detected == False %}
        {% if batsavedvar.requested_filament == 1 %}
            M118 Fialemt A did not reach the Sensor, retry...
            FILAMENT_A
            MANUAL_STEPPER STEPPER=BATMMU_stepper SET_POSITION=0
            MANUAL_STEPPER STEPPER=BATMMU_stepper MOVE={batvar.bowdenlength_a_mmu_to_y + batvar.smart_y_to_sensor} SPEED={batvar.feed_speed} ACCEL={batvar.acceleration} STOP_ON_ENDSTOP=2 SYNC=1
            G4 P0 #Don't remove this or the macro will stop working
        {% endif %}
        {% if batsavedvar.requested_filament == 2 %}
            M118 Fialemt B did not reach the Sensor, retry...
            FILAMENT_B
            MANUAL_STEPPER STEPPER=BATMMU_stepper SET_POSITION=0
            MANUAL_STEPPER STEPPER=BATMMU_stepper MOVE=-{batvar.bowdenlength_b_mmu_to_y + batvar.smart_y_to_sensor} SPEED={batvar.feed_speed} ACCEL={batvar.acceleration} STOP_ON_ENDSTOP=2 SYNC=1
            G4 P0 #Don't remove this or the macro will stop working
        {% endif %}
    {% endif %}


[gcode_macro _PARK_FILAMENT]
description: Park Filament A in the Y Splitter
variable_a_is_prepared: False
variable_b_is_prepared: False
gcode:
    {% set batvar = printer["gcode_macro _BATMMU_VAR"] %}
    {% set batsavedvar = printer.save_variables.variables %}
    {% if batsavedvar.requested_filament == 1 %}
      MANUAL_STEPPER STEPPER=BATMMU_stepper SET_POSITION=0
      MANUAL_STEPPER STEPPER=BATMMU_stepper MOVE=-{batvar.filament_park_distance} SPEED={batvar.feed_speed} ACCEL={batvar.acceleration} SYNC=1
      G4 P0 #Don't remove this or the macro will stop working
      M400
      SET_GCODE_VARIABLE MACRO=_PARK_FILAMENT VARIABLE=a_is_prepared VALUE=True
    {% endif %}
    {% if batsavedvar.requested_filament == 2 %}
      MANUAL_STEPPER STEPPER=BATMMU_stepper SET_POSITION=0
      MANUAL_STEPPER STEPPER=BATMMU_stepper MOVE={batvar.filament_park_distance} SPEED={batvar.feed_speed} ACCEL={batvar.acceleration} SYNC=1
      G4 P0 #Don't remove this or the macro will stop working
      M400
      SET_GCODE_VARIABLE MACRO=_PARK_FILAMENT VARIABLE=b_is_prepared VALUE=True
    {% endif %}
    G4 P500 #Don't remove this or the macro will stop working


### Past Y Splitter ###
[gcode_macro _Y_TO_EXTRUDER]
description: Load Filament from the Y Splitter to the extruder gears
gcode:
    {% set batsavedvar = printer.save_variables.variables %}
    {% set batvar = printer["gcode_macro _BATMMU_VAR"] %}
    {% if batsavedvar.requested_filament == 1 %}
        M118 Feeding Filament A to the extruder gears.
        MANUAL_STEPPER STEPPER=BATMMU_stepper SET_POSITION=0
        MANUAL_STEPPER STEPPER=BATMMU_stepper MOVE={batvar.filament_park_distance + batvar.sensor_blind_travel + batvar.smart_sensor_to_yend + batvar.bowdenlength_y_to_extruder + batvar.bowden_to_extruder} SPEED={batvar.feed_speed} ACCEL={batvar.acceleration} SYNC=0
        G4 P0 #Don't remove this or the macro will stop working
    {% endif %}
    {% if batsavedvar.requested_filament == 2 %}
        M118 Feeding Filament B to the extruder gears.
        MANUAL_STEPPER STEPPER=BATMMU_stepper SET_POSITION=0
        MANUAL_STEPPER STEPPER=BATMMU_stepper MOVE=-{batvar.filament_park_distance + batvar.sensor_blind_travel + batvar.smart_sensor_to_yend + batvar.bowdenlength_y_to_extruder + batvar.bowden_to_extruder} SPEED={batvar.feed_speed} ACCEL={batvar.acceleration} SYNC=0
      G4 P0 #Don't remove this or the macro will stop working
    {% endif %}

[gcode_macro _EXTRUDER_TO_TOOLHEAD_SENSOR]
description: Load Filament from the extruder gears to the toolhead sensor
gcode:
    {% set batvar = printer["gcode_macro _BATMMU_VAR"] %}
    {% set batsavedvar = printer.save_variables.variables %}
      {% if batsavedvar.paused == False %}
          #_SET_LOADING_TRUE
          G4 P1000
          {% if printer['extruder'].temperature < batvar.min_hotend_temp %}
              M118 Too cold heat up to set min temp of {batvar.min_hotend_temp|int}C.
              M104 S{batvar.min_hotend_temp|int}
              M109 S{batvar.min_hotend_temp|int}
          {% endif %}
          _ACTIVATE_BATMMU_EXTRUDER_STEPPER
          _SPLITTED_EXTRUDE
          M400
          #_SET_LOADING_FALSE
      {% endif %}
      {% if batsavedvar.paused == True %}
          M118 MMU was paused before. Make sure to fix the revious problem and run _RESUME_MMU when you fixed it.
          _PAUSE_MMU
      {% endif %}

[gcode_macro _RETRY_EXTRUDER_TO_TOOLHEAD_SENSOR]
description: Try to reload the Filament from the extruder gears to the toolhead sensor in case it did not reach the sensor.
gcode:
    {% set batvar = printer["gcode_macro _BATMMU_VAR"] %}
    {% set batsavedvar = printer.save_variables.variables %}
    {% if printer['filament_switch_sensor toolhead_sensor'].filament_detected == False %}
          #_SET_LOADING_TRUE
          G4 P1000
          _ACTIVATE_BATMMU_EXTRUDER_STEPPER
          _SPLITTED_EXTRUDE 
          M400
          #_SET_LOADING_FALSE
    {% endif %}

[gcode_macro _SPLITTED_EXTRUDE]
description: Split the loading extrude in 10 parts to get an accurate loading position
gcode:
    {% set batvar = printer["gcode_macro _BATMMU_VAR"] %}
    {% set batsavedvar = printer.save_variables.variables %}
    {% set splitted_extrudes = 10|int %}

    {% for extrude in range(splitted_extrudes|int) %}
        M118 This is run {extrude}
        _SPLITTED_EXTRUDE_MOVE
        M400
    {% endfor %}

[gcode_macro _SPLITTED_EXTRUDE_MOVE]
description: Split the loading extrude in 10 parts to get an accurate loading position
gcode:
    {% set batvar = printer["gcode_macro _BATMMU_VAR"] %}
    {% set batsavedvar = printer.save_variables.variables %}
    {% set splitted_extrudes = 10|int %}

        {% if printer['filament_switch_sensor toolhead_sensor'].filament_detected == True %}
            _DEACTIVATE_BATMMU_EXTRUDER_STEPPER
        {% endif %}
        {% if printer['filament_switch_sensor toolhead_sensor'].filament_detected == False %}
            M118 Filament False
            M83
            G1 E {(batvar.extruder_contact_length + batvar.extruder_to_toolheadsensor) / splitted_extrudes} F{batvar.extruder_feed_speed}
            G90
            M400
        {% endif %}

[gcode_macro _TOOLHEAD_SENSOR_TO_NOZZLE]
description: Load Filament from the sensor to the nozzle.
gcode:
    {% set batvar = printer["gcode_macro _BATMMU_VAR"] %}
    {% set batsavedvar = printer.save_variables.variables %}
    G1 E{batvar.toolhead_sensor_to_nozzle - batvar.anti_ooze} F{batvar.extruder_feed_speed}
    M118 Filament sits in the nozzle.

#######################
## Unloading helpers ##
#######################

### Before Y-Splitter ###

## Unpreparing
[gcode_macro _UNPREPARE_FILAMENT]
description: Moves Filament out of the Y to the MMU 
gcode:
    {% set batvar = printer["gcode_macro _BATMMU_VAR"] %}
    {% set batsavedvar = printer.save_variables.variables %}

    {% if batsavedvar.paused == False %}
          {% if batsavedvar.requested_filament == 1 %}
            MANUAL_STEPPER STEPPER=BATMMU_stepper SET_POSITION=0
            FILAMENT_A
            MANUAL_STEPPER STEPPER=BATMMU_stepper MOVE=-{batvar.bowdenlength_a_mmu_to_y + batvar.smart_y_to_sensor} SPEED={batvar.feed_speed} ACCEL={batvar.acceleration} STOP_ON_ENDSTOP=2 SYNC=1
            G4 P0 #Don't remove this or the macro will stop working
          {% endif %}
          {% if batsavedvar.requested_filament == 2 %}
            MANUAL_STEPPER STEPPER=BATMMU_stepper SET_POSITION=0
            FILAMENT_B
            MANUAL_STEPPER STEPPER=BATMMU_stepper MOVE={batvar.bowdenlength_b_mmu_to_y + batvar.smart_y_to_sensor} SPEED={batvar.feed_speed} ACCEL={batvar.acceleration} STOP_ON_ENDSTOP=2 SYNC=1
            G4 P0 #Don't remove this or the macro will stop working
          {% endif %}
    {% endif %}
    {% if batsavedvar.paused == True %}
        M118 MMU was paused before. Tststs, make sure to use _MMU_RESUME if something went wrong. Continue now anyways...
        M118 xy Wee need a makro that asks for a reload of filament when printer is printing (either reload or swap to other Filament)
        _SET_PAUSED_FALSE
        {% if batsavedvar.requested_filament == 1 %}
            MANUAL_STEPPER STEPPER=BATMMU_stepper SET_POSITION=0
            FILAMENT_A
            MANUAL_STEPPER STEPPER=BATMMU_stepper MOVE=-{batvar.bowdenlength_a_mmu_to_y + batvar.smart_y_to_sensor} SPEED={batvar.feed_speed} ACCEL={batvar.acceleration} STOP_ON_ENDSTOP=2 SYNC=1
            G4 P0 #Don't remove this or the macro will stop working
          {% endif %}
          {% if batsavedvar.requested_filament == 2 %}
            MANUAL_STEPPER STEPPER=BATMMU_stepper SET_POSITION=0
            FILAMENT_B
            MANUAL_STEPPER STEPPER=BATMMU_stepper MOVE={batvar.bowdenlength_b_mmu_to_y + batvar.smart_y_to_sensor} SPEED={batvar.feed_speed} ACCEL={batvar.acceleration} STOP_ON_ENDSTOP=2 SYNC=1
            G4 P0 #Don't remove this or the macro will stop working
          {% endif %}
    {% endif %}


### Past Y-Splitter ###
[gcode_macro _UNLOAD_TOOLHEAD]
description: Unload Filament from the nozzle behind the extruder gears.
gcode:
    {% set batvar = printer["gcode_macro _BATMMU_VAR"] %}
    {% set batsavedvar = printer.save_variables.variables %}

    M118 Set unloading temp of {batvar.unloading_temp|int}C.
    M104 S{batvar.unloading_temp|int}
    M109 S{batvar.unloading_temp|int}

    {% if batsavedvar.requested_filament == 1 %}
       FILAMENT_B
    {% endif %}
    {% if batsavedvar.requested_filament == 2 %}
       FILAMENT_A
    {% endif %}
    M118 Unloading filament from the toolhead.
    #_TIP_FORMING
    #G1 E-{batvar.toolhead_sensor_to_nozzle - printer["gcode_macro _TIP_FORMING"].total_tip_retraction_distance + batvar.extruder_contact_length + batvar.to_be_safe} F{batvar.extruder_unfeed_speed}
    #Shape_Tip
    _FORM_TIP_STANDALONE
    G1 E-{batvar.toolhead_sensor_to_nozzle - printer["gcode_macro _FORM_TIP_STANDALONE"].total_unload_distance + batvar.extruder_to_toolheadsensor + batvar.extruder_contact_length + batvar.to_be_safe} F{batvar.extruder_unfeed_speed}
    #_NO_TIP
    M400        

[gcode_macro _RETRY_UNLOAD_TOOLHEAD]
description: Unload Filament from the nozzle behind the extruder gears.
gcode:
    {% set batvar = printer["gcode_macro _BATMMU_VAR"] %}
    {% set batsavedvar = printer.save_variables.variables %}
    {% if printer['filament_switch_sensor toolhead_sensor'].filament_detected == True %}
        {% if batsavedvar.requested_filament == 1 %}
           FILAMENT_B
        {% endif %}
        {% if batsavedvar.requested_filament == 2 %}
           FILAMENT_A
        {% endif %}
        M118 Retry to unload filament from the toolhead.
        G1 E-{batvar.toolhead_sensor_to_nozzle + batvar.extruder_contact_length + batvar.to_be_safe} F{batvar.extruder_unfeed_speed}
        M400
    {% endif %}

[gcode_macro _EXTRUDER_TO_Y]
description: Unload Filament from the extruder gears to the Y-Splitter Park position.
gcode:
    {% set batvar = printer["gcode_macro _BATMMU_VAR"] %}
    {% set batsavedvar = printer.save_variables.variables %}

    {% if batsavedvar.requested_filament == 1 %}
      FILAMENT_A
      MANUAL_STEPPER STEPPER=BATMMU_stepper SET_POSITION=0
      MANUAL_STEPPER STEPPER=BATMMU_stepper MOVE=-{batvar.bowden_to_extruder  + batvar.bowdenlength_y_to_extruder + batvar.smart_sensor_to_yend} SPEED={batvar.unfeed_speed} ACCEL={batvar.acceleration}  STOP_ON_ENDSTOP=-2 SYNC=1
      G4 P0 #Don't remove this or the macro will stop working
      M400
    {% endif %}
    {% if batsavedvar.requested_filament == 2 %}
      FILAMENT_B
      MANUAL_STEPPER STEPPER=BATMMU_stepper SET_POSITION=0
      MANUAL_STEPPER STEPPER=BATMMU_stepper MOVE={batvar.bowden_to_extruder  + batvar.bowdenlength_y_to_extruder + batvar.smart_sensor_to_yend} SPEED={batvar.unfeed_speed} ACCEL={batvar.acceleration}  STOP_ON_ENDSTOP=-2 SYNC=1
      G4 P0 #Don't remove this or the macro will stop working
      M400
    {% endif %}

[gcode_macro _RETRY_EXTRUDER_TO_Y]
description: Unload Filament from the extruder gears to the Y-Splitter Park position.
gcode:
    {% set batvar = printer["gcode_macro _BATMMU_VAR"] %}
    {% set batsavedvar = printer.save_variables.variables %}
    {% if printer['filament_switch_sensor load_check_sensor'].filament_detected == True %}
        {% if batsavedvar.requested_filament == 1 %}
          FILAMENT_A
          MANUAL_STEPPER STEPPER=BATMMU_stepper SET_POSITION=0
          MANUAL_STEPPER STEPPER=BATMMU_stepper MOVE=-{batvar.bowden_to_extruder  + batvar.bowdenlength_y_to_extruder + batvar.smart_sensor_to_yend} SPEED={batvar.unfeed_speed} ACCEL={batvar.acceleration}  STOP_ON_ENDSTOP=-2 SYNC=1
          G4 P0 #Don't remove this or the macro will stop working
          M400
        {% endif %}
        {% if batsavedvar.requested_filament == 2 %}
          FILAMENT_B
          MANUAL_STEPPER STEPPER=BATMMU_stepper SET_POSITION=0
          MANUAL_STEPPER STEPPER=BATMMU_stepper MOVE={batvar.bowden_to_extruder  + batvar.bowdenlength_y_to_extruder + batvar.smart_sensor_to_yend} SPEED={batvar.unfeed_speed} ACCEL={batvar.acceleration}  STOP_ON_ENDSTOP=-2 SYNC=1
          G4 P0 #Don't remove this or the macro will stop working
          M400
        {% endif %}
    {% endif %}

######################################################
## MMU and Extruder actions for loadings/unloadings ##
######################################################
[gcode_macro _REVERSE_BATMMU_EXTRUDER_STEPPER]
gcode:
    {% set distance = printer.configfile.config['extruder_stepper BATMMU_extruder_stepper'].rotation_distance %}
    M118 BATMMU gets reversed.
    SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER=BATMMU_extruder_stepper DISTANCE=-{distance}
    G1 P500

[gcode_macro _UNREVERSE_BATMMU_EXTRUDER_STEPPER]
gcode:
    M118 BATMMU gets unreversed.
    {% set distance = printer.configfile.config['extruder_stepper BATMMU_extruder_stepper'].rotation_distance %}
    SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER=BATMMU_extruder_stepper DISTANCE={distance}
    G1 P500

[gcode_macro _ACTIVATE_BATMMU_EXTRUDER_STEPPER]
description: Activate the MMU as Extruder 
gcode:
    {% set batvar = printer["gcode_macro _BATMMU_VAR"] %}
    {% set batsavedvar = printer.save_variables.variables %}
    M118 Sync MMU and Extruder for toolhead loading.
    #{% if batsavedvar.requested_filament == 1 %}
    #   _UNREVERSE_BATMMU_EXTRUDER_STEPPER
    #{% endif %}
    #{% if batsavedvar.requested_filament == 2 %}
       _REVERSE_BATMMU_EXTRUDER_STEPPER
    #{% endif %}
    SYNC_EXTRUDER_MOTION EXTRUDER=BATMMU_extruder_stepper MOTION_QUEUE=extruder
    G1 P500

[gcode_macro _DEACTIVATE_BATMMU_EXTRUDER_STEPPER]
description: Dectivate the MMU as Extruder and also deactivate the main extruder
gcode:
    {% set batsavedvar = printer.save_variables.variables %}
    M118 Filament reached the sensor, the MMU and extruder get deactivated.
    SYNC_EXTRUDER_MOTION EXTRUDER=BATMMU_extruder_stepper MOTION_QUEUE=
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE=
        {% if batsavedvar.requested_filament == 1 %}
           FILAMENT_B
        {% endif %}
        {% if batsavedvar.requested_filament == 2 %}
           FILAMENT_A
        {% endif %}
    G1 P500

[gcode_macro _RESET_BATMMU_EXTRUDER_STEPPER]
description: Reset the MMU Stepper and the extruder
gcode:
    {% set batvar = printer["gcode_macro _BATMMU_VAR"] %}
    {% set batsavedvar = printer.save_variables.variables %}
    M118 Loading is done. Resetting and un-sync the MMU and extruder. 
    SYNC_EXTRUDER_MOTION EXTRUDER=BATMMU_extruder_stepper MOTION_QUEUE=
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE=extruder
    #{% if batsavedvar.requested_filament == 2 %}
    #   _UNREVERSE_BATMMU_EXTRUDER_STEPPER
    #{% endif %}
    G1 P500